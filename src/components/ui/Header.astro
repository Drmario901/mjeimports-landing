---
import { Home, Users, Briefcase, HelpCircle, Mail, Menu, X } from "@lucide/astro";

const navLinks = [
  { label: "Inicio", href: "#inicio", icon: Home },
  { label: "Servicios", href: "#servicios", icon: Briefcase },
  { label: "Quiénes Somos", href: "#quienes-somos", icon: Users },
  { label: "Cómo Funciona", href: "#como-funciona", icon: HelpCircle },
  { label: "Contacto", href: "#contact", icon: Mail },
];
---
<header class="fixed top-0 left-0 w-full bg-white shadow-md z-50 transition-all duration-300">
  <div class="max-w-7xl mx-auto px-4 py-3 flex justify-between items-center">
    <a href="#inicio" class="flex items-center">
      <img src="/logo.png" alt="Logo MJE Imports" class="h-14 w-auto" />
    </a>

    <nav class="hidden lg:flex space-x-3">
      {navLinks.map(({ href, label, icon: Icon }) => (
        <a
          href={href}
          class="group flex items-center gap-2 px-3 py-2 rounded-lg font-medium text-sm text-gray-700 transition-all duration-200 relative"
        >
          <Icon size={18} class="text-[#002f6c]" />
          {label}
          <span
            class="absolute bottom-0 left-0 w-0 h-[2px] bg-[#002f6c] rounded-full transition-all duration-300 group-hover:w-full"
          ></span>
        </a>
      ))}
    </nav>

    <button
      id="menu-toggle"
      class="lg:hidden flex items-center justify-center w-10 h-10 rounded-lg border border-gray-300 text-gray-800 hover:bg-gray-100 transition-all duration-200"
      aria-label="Abrir menú"
    >
      <Menu size={24} id="menu-icon" />
      <X size={24} id="close-icon" class="hidden" />
    </button>
  </div>

  <nav
    id="mobile-menu"
    class="absolute top-[100%] mt-2 left-0 w-full bg-white shadow-md rounded-b-2xl flex-col items-center opacity-0 pointer-events-none transform translate-y-[-20px] transition-all duration-300"
  >
    {navLinks.map(({ href, label, icon: Icon }) => (
      <a
        href={href}
        class="mobile-link w-full flex items-center justify-start gap-3 px-6 py-3 border-b border-gray-100 text-gray-700 font-medium transition-all duration-200 hover:bg-[#002f6c]/10 hover:text-[#002f6c]"
      >
        <Icon size={20} class="text-[#002f6c]" />
        {label}
      </a>
    ))}
  </nav>
</header>

<style>
  header.scrolled {
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
    background-color: #ffffffee;
    backdrop-filter: blur(8px);
  }

  .active-link {
    color: #002f6c;
    font-weight: 600;
  }
  .active-link span {
    width: 100% !important;
  }

  #mobile-menu.show {
    opacity: 1;
    pointer-events: auto;
    transform: translateY(0);
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const menuToggle = document.getElementById("menu-toggle");
    const mobileMenu = document.getElementById("mobile-menu");
    const menuIcon = document.getElementById("menu-icon");
    const closeIcon = document.getElementById("close-icon");
    const navLinks = document.querySelectorAll("nav a");
    const sections = document.querySelectorAll("section[id]");

    menuToggle.addEventListener("click", () => {
      const isOpen = mobileMenu.classList.toggle("show");
      menuIcon.classList.toggle("hidden", isOpen);
      closeIcon.classList.toggle("hidden", !isOpen);
    });

    document.querySelectorAll(".mobile-link").forEach((link) => {
      link.addEventListener("click", () => {
        mobileMenu.classList.remove("show");
        menuIcon.classList.remove("hidden");
        closeIcon.classList.add("hidden");
      });
    });

    function setActiveLink(href) {
      navLinks.forEach((link) => {
        const isActive = link.getAttribute("href") === href;
        link.classList.toggle("active-link", isActive);
      });
    }

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setActiveLink(`#${entry.target.id}`);
            history.replaceState(null, "", `#${entry.target.id}`);
          }
        });
      },
      { threshold: 0.4 }
    );

    sections.forEach((section) => observer.observe(section));

    navLinks.forEach((link) => {
      link.addEventListener("click", (e) => {
        const href = link.getAttribute("href");
        if (href.startsWith("#")) {
          e.preventDefault();
          const target = document.querySelector(href);
          if (target) {
            target.scrollIntoView({ behavior: "smooth", block: "start" });
          }
        }
      });
    });

    const header = document.querySelector("header");
    window.addEventListener("scroll", () => {
      if (window.scrollY > 20) header.classList.add("scrolled");
      else header.classList.remove("scrolled");
    });
  });
</script>
